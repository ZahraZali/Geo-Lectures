{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Lecture 5: Snuffler exercise functions \n",
    "# \n",
    "# author: Eva Eibl eva.eibl@uni-potsdam.de\n",
    "# SS 2019: Module MGPW02\n",
    "# -------------------------------\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def read_snuffler_marker(filen, length=1, nojul=0):\n",
    "    \"\"\"\n",
    "    Helper function to read snuffler marker.\n",
    "    :type filen: string\n",
    "    :param filen: path to snuffler marker file \n",
    "    :type length: 0 or 1         \n",
    "    :param length: indicates whether marker file has \n",
    "                   4 columns [key 0] (start date, start time, class, station) or \n",
    "                   6 columns [key 1] (start date, start time, end date, end time, class, station)\n",
    "    :type nojul: 0 or 1\n",
    "    :param nojul: 0 if date returned in julday, 1 if returned in year, month...\n",
    "    :return: time, event class.\n",
    "    \"\"\"\n",
    "    ## -- read in lines \n",
    "    f = open (filen, 'r')\n",
    "    lines = []\n",
    "    for line in f : \n",
    "        li = line.strip()\n",
    "        if not li.startswith(\"#\"): # ignore lines that start with #\n",
    "            lines.append(li)\n",
    "        #end\n",
    "    #end\n",
    "    f.close()\n",
    "\n",
    "    ## -- read certain values from lines\n",
    "    date1 = []\n",
    "    tim1 = []\n",
    "    date2 = []\n",
    "    tim2 = []\n",
    "    evclass1 = []\n",
    "    evclass2 = []\n",
    "    for i in range(len(lines)):\n",
    "        temp = lines[i]\n",
    "        if length==1:\n",
    "            if len(temp.split())!=4:\n",
    "                date1.append(temp.split()[0])\n",
    "                tim1.append(temp.split()[1])\n",
    "                date2.append(temp.split()[2])\n",
    "                tim2.append(temp.split()[3])\n",
    "                evclass2.append(float(temp.split()[4]))\n",
    "            #end\n",
    "        else:\n",
    "            date1.append(temp.split()[0])\n",
    "            tim1.append(temp.split()[1])\n",
    "            evclass1.append(float(temp.split()[2]))\n",
    "        #end\n",
    "    #end\n",
    "\n",
    "    ## -- extract year, day, hour etc. from date, time\n",
    "    year1 = []\n",
    "    mon1 = []\n",
    "    day1 = []\n",
    "    hour1 = []\n",
    "    minu1 = []\n",
    "    sec1 = []\n",
    "    year2 = []\n",
    "    mon2 = []\n",
    "    day2 = []\n",
    "    hour2 = []\n",
    "    minu2 = []\n",
    "    sec2 = []\n",
    "    for i in range(len(date1)):\n",
    "        year1.append(int(date1[i].split('-')[0]))\n",
    "        mon1.append(int(date1[i].split('-')[1]))\n",
    "        day1.append(int(date1[i].split('-')[2]))\n",
    "        hour1.append(int(tim1[i].split(':')[0]))\n",
    "        minu1.append(int(tim1[i].split(':')[1]))\n",
    "        sec1.append(float(tim1[i].split(':')[2]))\n",
    "    #end\n",
    "    if length==1:\n",
    "        for i in range(len(date2)):\n",
    "            year2.append(int(date2[i].split('-')[0]))\n",
    "            mon2.append(int(date2[i].split('-')[1]))\n",
    "            day2.append(int(date2[i].split('-')[2]))\n",
    "            hour2.append(int(tim2[i].split(':')[0]))\n",
    "            minu2.append(int(tim2[i].split(':')[1]))\n",
    "            sec2.append(float(tim2[i].split(':')[2]))\n",
    "        #end\n",
    "    #end\n",
    "     \n",
    "    ## -- calculate julday date\n",
    "    julday1 = convertJulday(year1, mon1, day1, hour1, minu1, sec1)\n",
    "    julday2 = convertJulday(year2, mon2, day2, hour2, minu2, sec2)\n",
    "\n",
    "    if length==0:\n",
    "        if nojul==0:\n",
    "            return julday1, evclass1\n",
    "        if nojul==1:\n",
    "            return year1, mon1, day1, hour1, minu1, sec1, evclass1\n",
    "        #end\n",
    "    elif length==1:\n",
    "        if nojul==0:\n",
    "            return julday1, julday2, evclass2\n",
    "        if nojul==1:\n",
    "            return year1, mon1, day1, hour1, minu1, sec1, year2, mon2, day2, hour2, minu2, sec2, evclass2\n",
    "        #end\n",
    "    #end\n",
    "\n",
    "def convertJulday(year, month, day, hour, minu, second):\n",
    "  \"\"\"\n",
    "  Helper function to convert year, month, day into julday\n",
    "    :type year: array\n",
    "    :param year: year of data point\n",
    "    :type month: array\n",
    "    :param month: month of data point\n",
    "    :type day: array\n",
    "    :param day: day of data point\n",
    "    :type hour: array\n",
    "    :param hour: hour of data point\n",
    "    :type minu: array\n",
    "    :param minu: minute of data point\n",
    "    :type second: array\n",
    "    :param second: second of data point\n",
    "    :return: julian day 1 column array\n",
    "  \"\"\"\n",
    "\n",
    "  # -- convert to julday\n",
    "  julday=[]\n",
    "  for i in range(len(year)):\n",
    "    if year[i]==2013 or year[i]==2014 or year[i]==2015 or year[i]==2017 or year[i]==2018:\n",
    "       if month[i]==1:\n",
    "          julday.append(0+day[i]+hour[i]/24.+minu[i]/(24.*60.)+second[i]/(24.*60.*60.))\n",
    "       elif month[i]==2:\n",
    "          julday.append(31+day[i]+hour[i]/24.+minu[i]/(24.*60.)+second[i]/(24.*60.*60.))\n",
    "       elif month[i]==3:\n",
    "          julday.append(59+day[i]+hour[i]/24.+minu[i]/(24.*60.)+second[i]/(24.*60.*60.))\n",
    "       elif month[i]==4:\n",
    "          julday.append(90+day[i]+hour[i]/24.+minu[i]/(24.*60.)+second[i]/(24.*60.*60.))\n",
    "       elif month[i]==5:\n",
    "          julday.append(120+day[i]+hour[i]/24.+minu[i]/(24.*60.)+second[i]/(24.*60.*60.))\n",
    "       elif month[i]==6:\n",
    "          julday.append(151+day[i]+hour[i]/24.+minu[i]/(24.*60.)+second[i]/(24.*60.*60.))\n",
    "       elif month[i]==7:\n",
    "          julday.append(181+day[i]+hour[i]/24.+minu[i]/(24.*60.)+second[i]/(24.*60.*60.))\n",
    "       elif month[i]==8:\n",
    "          julday.append(212+day[i]+hour[i]/24.+minu[i]/(24.*60.)+second[i]/(24.*60.*60.))\n",
    "       elif month[i]==9:\n",
    "          julday.append(243+day[i]+hour[i]/24.+minu[i]/(24.*60.)+second[i]/(24.*60.*60.))\n",
    "       elif month[i]==10:\n",
    "          julday.append(273+day[i]+hour[i]/24.+minu[i]/(24.*60.)+second[i]/(24.*60.*60.))\n",
    "       elif month[i]==11:\n",
    "          julday.append(304+day[i]+hour[i]/24.+minu[i]/(24.*60.)+second[i]/(24.*60.*60.))\n",
    "       elif month[i]==12:\n",
    "          julday.append(334+day[i]+hour[i]/24.+minu[i]/(24.*60.)+second[i]/(24.*60.*60.))\n",
    "       #end\n",
    "    elif year[i]==2012 or year[i]==2016:\n",
    "       if month[i]==1:\n",
    "          julday.append(0+day[i]+hour[i]/24.+minu[i]/(24.*60.)+second[i]/(24.*60.*60.))\n",
    "       elif month[i]==2:\n",
    "          julday.append(31+day[i]+hour[i]/24.+minu[i]/(24.*60.)+second[i]/(24.*60.*60.))\n",
    "       elif month[i]==3:\n",
    "          julday.append(60+day[i]+hour[i]/24.+minu[i]/(24.*60.)+second[i]/(24.*60.*60.))\n",
    "       elif month[i]==4:\n",
    "          julday.append(91+day[i]+hour[i]/24.+minu[i]/(24.*60.)+second[i]/(24.*60.*60.))\n",
    "       elif month[i]==5:\n",
    "          julday.append(121+day[i]+hour[i]/24.+minu[i]/(24.*60.)+second[i]/(24.*60.*60.))\n",
    "       elif month[i]==6:\n",
    "          julday.append(152+day[i]+hour[i]/24.+minu[i]/(24.*60.)+second[i]/(24.*60.*60.))\n",
    "       elif month[i]==7:\n",
    "          julday.append(182+day[i]+hour[i]/24.+minu[i]/(24.*60.)+second[i]/(24.*60.*60.))\n",
    "       elif month[i]==8:\n",
    "          julday.append(213+day[i]+hour[i]/24.+minu[i]/(24.*60.)+second[i]/(24.*60.*60.))\n",
    "       elif month[i]==9:\n",
    "          julday.append(244+day[i]+hour[i]/24.+minu[i]/(24.*60.)+second[i]/(24.*60.*60.))\n",
    "       elif month[i]==10:\n",
    "          julday.append(274+day[i]+hour[i]/24.+minu[i]/(24.*60.)+second[i]/(24.*60.*60.))\n",
    "       elif month[i]==11:\n",
    "          julday.append(305+day[i]+hour[i]/24.+minu[i]/(24.*60.)+second[i]/(24.*60.*60.))\n",
    "       elif month[i]==12:\n",
    "          julday.append(335+day[i]+hour[i]/24.+minu[i]/(24.*60.)+second[i]/(24.*60.*60.))\n",
    "       #end\n",
    "    #end\n",
    "  #end\n",
    "  return julday"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
